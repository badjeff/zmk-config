/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <zephyr/dt-bindings/input/input-event-codes.h>

#include <behaviors.dtsi>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors/mouse_key_press.dtsi>
#include <behaviors/mouse_key_toggle.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/input_transform.h>

#include <behaviors/tempo.dtsi>
#include <behaviors/insomnia.dtsi>
#include <dt-bindings/zmk/insomnia.h>

#define DEF 0
#define LHB 1
#define NUM 2
#define MSK 3
#define MSC 4

#ifndef MOVE_Y
#define MOVE_Y(n) (0)
#endif
#ifndef MOVE_X
#define MOVE_X(n) (0)
#endif

#define U_MOUSE_MOVE_MAX 1700
#define MOU_U MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MOU_D MOVE_Y(U_MOUSE_MOVE_MAX)
#define MOU_L MOVE_X(-U_MOUSE_MOVE_MAX)
#define MOU_R MOVE_X(U_MOUSE_MOVE_MAX)

#define U_MOUSE_SCROLL_MAX 20
#define SCL_U MOVE_Y(U_MOUSE_SCROLL_MAX)
#define SCL_D MOVE_Y(-U_MOUSE_SCROLL_MAX)
#define SCL_L MOVE_X(-U_MOUSE_SCROLL_MAX)
#define SCL_R MOVE_X(U_MOUSE_SCROLL_MAX)

/ {
        //   0   1   2   3   4     5   6   7   8   9
        //  10  11  12  13  14    15  16  17  18  19
        //  20  21  22  23  24    25  26  27  28  29
        //          30  31  32    33  34  35
        //  36 37 38
        combos {
                compatible = "zmk,combos";

                q   { timeout-ms = <80>; key-positions = <1 2>; bindings = <&kp Q>; layers = <DEF LHB>; };
                t   { timeout-ms = <70>; key-positions = <2 3>; bindings = <&kp T>; layers = <DEF LHB>; };
                g   { timeout-ms = <60>; key-positions = <12 13>; bindings = <&kp G>; layers = <DEF LHB>; };
                b   { timeout-ms = <60>; key-positions = <22 23>; bindings = <&kp B>; layers = <DEF LHB>; };
                b_d { timeout-ms = <70>; key-positions = <2 13>; bindings = <&kp B>; layers = <DEF LHB>; };
                b_v { timeout-ms = <60>; key-positions = <23 13>; bindings = <&kp B>; layers = <DEF LHB>; };
                t_v { timeout-ms = <60>; key-positions = <3 13>; bindings = <&kp T>; layers = <DEF LHB>; };

                z   { timeout-ms = <30>; key-positions = <10 31>; bindings = <&kp Z>; layers = <DEF LHB>; };
                x   { timeout-ms = <30>; key-positions = <11 31>; bindings = <&kp X>; layers = <DEF LHB>; };
                c   { timeout-ms = <30>; key-positions = <12 31>; bindings = <&kp C>; layers = <DEF LHB>; };
                v   { timeout-ms = <30>; key-positions = <13 31>; bindings = <&kp V>; layers = <DEF LHB>; };
                b_t { timeout-ms = <30>; key-positions = <13 32>; bindings = <&kp B>; layers = <DEF LHB>; };

                p   { timeout-ms = <80>; key-positions = <7 8>; bindings = <&kp P>; layers = <DEF LHB>; };
                y   { timeout-ms = <70>; key-positions = <6 7>; bindings = <&kp Y>; layers = <DEF LHB>; };
                h   { timeout-ms = <60>; key-positions = <16 17>; bindings = <&kp H>; layers = <DEF LHB>; };
                n   { timeout-ms = <60>; key-positions = <26 27>; bindings = <&kp N>; layers = <DEF LHB>; };
                n_d { timeout-ms = <70>; key-positions = <7 16>; bindings = <&kp N>; layers = <DEF LHB>; };
                n_v { timeout-ms = <60>; key-positions = <26 16>; bindings = <&kp N>; layers = <DEF LHB>; };
                y_v { timeout-ms = <60>; key-positions = <6 16>; bindings = <&kp Y>; layers = <DEF LHB>; };

                n_t   { timeout-ms = <30>; key-positions = <16 33>; bindings = <&kp N>; layers = <DEF LHB>; };
                m     { timeout-ms = <30>; key-positions = <16 34>; bindings = <&kp M>; layers = <DEF LHB>; };
                comma { timeout-ms = <30>; key-positions = <17 34>; bindings = <&kp COMMA>; layers = <DEF LHB>; };
                dot   { timeout-ms = <30>; key-positions = <18 34>; bindings = <&kp DOT>; layers = <DEF LHB>; };
                flash { timeout-ms = <30>; key-positions = <19 34>; bindings = <&kp FSLH>; layers = <DEF LHB>; };

                bksp { timeout-ms = <70>; key-positions = <17 18>; bindings = <&kp BKSP>; layers = <DEF LHB NUM>; };                
                esc  { timeout-ms = <70>; key-positions = <11 12>; bindings = <&kp ESC>; layers = <DEF LHB NUM>; };

                spcr { timeout-ms = <70>; key-positions = <27 28>; bindings = <&kp SPC>; layers = <DEF LHB NUM>; };
                tab  { timeout-ms = <70>; key-positions = <21 22>; bindings = <&kp TAB>; layers = <DEF LHB NUM>; };

                ret1  { timeout-ms = <30>; key-positions = <17 26>; bindings = <&kp RET>; layers = <DEF LHB NUM>; };
                ret2  { timeout-ms = <30>; key-positions = <12 23>; bindings = <&kp RET>; layers = <DEF LHB NUM>; };

                n1   { timeout-ms = <80>; key-positions = <1 2>; bindings = <&kp N1>; layers = <NUM>; };
                n5   { timeout-ms = <70>; key-positions = <2 3>; bindings = <&kp N5>; layers = <NUM>; };
                n5_v { timeout-ms = <60>; key-positions = <3 13>; bindings = <&kp N5>; layers = <NUM>; };
                
                n0   { timeout-ms = <80>; key-positions = <7 8>; bindings = <&kp N0>; layers = <NUM>; };
                n6   { timeout-ms = <70>; key-positions = <6 7>; bindings = <&kp N6>; layers = <NUM>; };
                n6_v { timeout-ms = <60>; key-positions = <6 16>; bindings = <&kp N6>; layers = <NUM>; };

                f1   { timeout-ms = <80>; key-positions = <1 2>; bindings = <&kp F1>; layers = <MSK>; };
                f5   { timeout-ms = <70>; key-positions = <2 3>; bindings = <&kp F5>; layers = <MSK>; };
                f5_v { timeout-ms = <60>; key-positions = <3 13>; bindings = <&kp F5>; layers = <MSK>; };

                f10  { timeout-ms = <80>; key-positions = <7 8>; bindings = <&kp F10>; layers = <MSK>; };
                f6   { timeout-ms = <70>; key-positions = <6 7>; bindings = <&kp F6>; layers = <MSK>; };
                f6_v { timeout-ms = <60>; key-positions = <6 16>; bindings = <&kp F6>; layers = <MSK>; };

                f11  { timeout-ms = <90>; key-positions = <6 7 8>; bindings = <&kp F11>; layers = <MSK>; };
                f12  { timeout-ms = <90>; key-positions = <1 2 3>; bindings = <&kp F12>; layers = <MSK>; };

                mkp_swap { timeout-ms = <60>; key-positions = <36 38>; bindings = <&tog LHB>; layers = <DEF LHB NUM MSK MSC>; };

                nav_left { timeout-ms = <80>; key-positions = <16 17>; bindings = <&kp LEFT>; layers = <NUM>; };
                mmv_left { timeout-ms = <80>; key-positions = <16 17>; bindings = <&mmv MOU_L>; layers = <MSK>; };
                msc_left { timeout-ms = <80>; key-positions = <16 17>; bindings = <&msc SCL_L>; layers = <MSC>; };

                dfu_l { timeout-ms = <80>; key-positions = <0 1>; bindings = <&bootloader>; layers = <MSC>; };
        };

        behaviors {
                hm_l: homerow_mods_left {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&kp>, <&kp>;
                };
                hm_r: homerow_mods_right {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&kp>, <&kp>;
                };
                hl_l: homerow_layers_left {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&mo>, <&kp>;
                };
                hl_r: homerow_layers_right {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&mo>, <&kp>;
                };
                hmkp_tg: hold_mouse_key_press_tap_toggle {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&mkp>, <&tog>;
                };
                // rot_enc: sensor_rotate {
                //         compatible = "zmk,behavior-sensor-rotate";
                //         #sensor-binding-cells = <0>;
                //         bindings = <&msc SCL_D>, <&msc SCL_U>;
                //         tap-ms = <120>;
                // };
        };

        keymap {
                compatible = "zmk,keymap";
                DEF_layer {
// +------------------------------------------------------+     +--------------------------------------------------------+
// |     Q    |  LCTRL:W |  _MSK:E  |  LALT:R  |     T    |     |     Y     |  RALT:U  |  _MSK:I   |  RCTRL:O |     P    |
// |     A    |  _NUM:S  |  _NUM:D  |  LGUI:F  |     G    |     |     H     |  RGUI:J  |  _NUM:K   |  _NUM:L  |     ;:   |
// |  SHFT Z  |  LGUI:X  |     C    |     V    |     B    |     |     N     |     M    |    ,<     |  LGUI:.> |  SHFT /? |
//                       | ^MSK:ESC |  GUI:ESC | CTRL:TAB |     |  ALT:ENT  | _NUM:SPC | ^MSK:BKSP |
                        bindings = <
   &kp Q          &hm_l LCTRL W   &hl_l MSK E    &hm_l LALT R    &kp T               &kp Y           &hm_r RALT U     &hl_r MSK I     &hm_r RCTRL O   &kp P
   &kp A          &hl_l NUM S     &hl_l NUM D    &hm_l LGUI F    &kp G               &kp H           &hm_r RGUI J     &hl_r NUM K     &hl_r NUM L     &kp SEMI
   &mt LSHFT Z    &hm_l LGUI X    &kp C          &kp V           &kp B               &kp N           &kp M            &kp COMMA       &hm_r LGUI DOT  &mt RSHFT FSLH
                                  &lt MSK ESC    &mt LGUI ESC    &mt LCTRL TAB       &mt LALT RET    &lt NUM SPACE    &lt MSK BKSP
   &mkp RCLK   &hmkp_tg MCLK MSC   &mkp LCLK
                        >;
                        // sensor-bindings = <&rot_enc>;
                };
                LHB_layer {
                        bindings = <
   &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
   &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
   &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                   &trans  &trans  &trans    &trans  &trans  &trans
   &mkp LCLK   &hmkp_tg MCLK MSC   &mkp RCLK
                        >;
                        // sensor-bindings = <&rot_enc>;
                };
                NUM_layer {
// +------------------------------------------------------+     +-------------------------------------------------------+
// |    1!    | LCTRL:2@  |    3#    | LALT:4$  |    5%   |     |    6^    |  RALT:7& |    8&    |  RCTRL 9( |    0)    |
// |    `~    |           |    {[    |    ]}    |   TAB   |     |    LFT   |   DWN    |    UP    |    RGT    |    '"    |
// | SHFT TAB |           |          |          |   RET   |     |   BKSP   |    -_    |    =+    |    SPC    |  SHFT \| |
//                        |          |          |         |     |          |    (H)   |          |
                        bindings = <
   &kp N1             &hm_l LCTRL N2   &kp N3     &hm_l LALT N4   &kp N5              &kp N6      &hm_r RALT N7   &kp N8      &hm_r RCTRL N9   &kp N0
   &kp GRAVE          &trans           &kp LBKT   &kp RBKT        &kp TAB             &kp LEFT    &kp DOWN        &kp UP      &kp RIGHT        &kp SQT
   &mt LSHFT TAB      &trans           &trans     &trans          &kp RET             &kp BKSP    &kp MINUS       &kp EQUAL   &kp SPACE        &mt RSHFT BSLH
                                       &trans     &trans          &trans              &trans      &trans          &trans
   &trans   &trans   &trans
                        >;
                };
                MSK_layer {
// +------------------------------------------------------+     +------------------------------------------------------+
// |    F1    |    F2    |  (H) F3  |  _MSC:F4 |    F5    |     |    F6    |  _MSC:F7 |  (H) F8  |    F9    |   F10    |
// |   VOLD   |   VOLU   |   BRID   |   BRIU   |   F12    |     |   MLFT   |   MDWN   |    MUP   |   MRGT   |   F11    |
// |   _MSC   |   RCLK   |   MCLK   |   LCLK   |          |     |          |   LCLK   |   MCLK   |   RCLK   |  _MSC    |
//                       |   (H)    |          |          |     |          |          |    (H)   |
                        bindings = <
   &kp F1        &kp F2        &kp F3        &lt MSC F4    &kp F5            &kp F6      &lt MSC F7  &kp F8      &kp F9      &kp F1
   &kp C_VOL_DN  &kp C_VOL_UP  &kp C_BRI_DN  &kp C_BRI_UP  &kp F12           &mmv MOU_L  &mmv MOU_D  &mmv MOU_U  &mmv MOU_R  &kp F11
   &mo MSC       &mkp RCLK     &mkp MCLK     &mkp LCLK     &trans            &trans      &mkp LCLK   &mkp MCLK   &mkp RCLK   &mo MSC
                               &trans        &trans        &trans            &trans      &trans      &trans
   &trans   &trans   &trans
                        >;
                };
                MSC_layer {
// +------------------------------------------------------+     +------------------------------------------------------+
// |   TEMPO  |   BT_0   | (H) BT_1 | (H) BT_C |          |     |          |    (H)   |    (H)   |          |    DFU   |
// |   RESET  |  ISA_ON  |  ISA_OFF |  ISA_SLP |          |     |   SLFT   |   SDWN   |    SUP   |   SRGT   |   RESET  |
// |    (H)   |   RCLK   |   MCLK   |   LCLK   |          |     |          |   LCLK   |   MCLK   |   RCLK   |    (H)   |
//                       |   (H)    |          |          |     |          |          |    (H)   |
                        bindings = <
   &tempo      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_CLR    &trans            &trans       &trans        &trans      &trans        &bootloader
   &sys_reset  &isa ISA_ON   &isa ISA_OFF  &isa ISA_SLP  &trans            &msc SCL_L   &msc SCL_D    &msc SCL_U  &msc SCL_R    &sys_reset
   &trans      &mkp RCLK     &mkp MCLK     &mkp LCLK     &trans            &trans       &mkp LCLK     &mkp MCLK   &mkp RCLK     &trans
                             &trans        &trans        &trans            &trans       &trans        &trans
   &trans   &trans   &trans
                        >;
                };
       };
};
