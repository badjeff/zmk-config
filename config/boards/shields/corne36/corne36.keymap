/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <zephyr/dt-bindings/input/input-event-codes.h>

#include <behaviors.dtsi>
#include <behaviors/studio_unlock.dtsi>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors/mouse_key_press.dtsi>
#include <behaviors/mouse_key_toggle.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/input_transform.h>

#include <behaviors/insomnia.dtsi>
#include <dt-bindings/zmk/insomnia.h>

#define DEF 0
#define GME 1
#define LHB 2
#define NUM 3
#define MSK 4
#define MSC 5

#ifndef MOVE_Y
#define MOVE_Y(n) (0)
#endif
#ifndef MOVE_X
#define MOVE_X(n) (0)
#endif

#define U_MOUSE_MOVE_MAX 1700
#define MOU_U MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MOU_D MOVE_Y(U_MOUSE_MOVE_MAX)
#define MOU_L MOVE_X(-U_MOUSE_MOVE_MAX)
#define MOU_R MOVE_X(U_MOUSE_MOVE_MAX)

#define U_MOUSE_SCROLL_MAX 10
#define SCL_U MOVE_Y(U_MOUSE_SCROLL_MAX)
#define SCL_D MOVE_Y(-U_MOUSE_SCROLL_MAX)
#define SCL_L MOVE_X(-U_MOUSE_SCROLL_MAX)
#define SCL_R MOVE_X(U_MOUSE_SCROLL_MAX)

/ {
        xy_transf: xy_transf {
                compatible = "zmk,input-processor-transform";
                #input-processor-cells = <1>;
                type = <INPUT_EV_REL>;
                x-codes = <INPUT_REL_X>, <INPUT_REL_WHEEL>;
                y-codes = <INPUT_REL_Y>, <INPUT_REL_HWHEEL>;
        };
        xy_scaler: xy_scaler {
                compatible = "zmk,input-processor-scaler";
                #input-processor-cells = <2>;
                type = <INPUT_EV_REL>;
                codes = <INPUT_REL_X>, <INPUT_REL_Y>;
                track-remainders;
        };
        x_scaler: x_scaler {
                compatible = "zmk,input-processor-scaler";
                #input-processor-cells = <2>;
                type = <INPUT_EV_REL>;
                codes = <INPUT_REL_X>;
        };
        to_wheel: to_wheel {
                compatible = "zmk,input-processor-code-mapper";
                #input-processor-cells = <0>;
                type = <INPUT_EV_REL>;
                map = <INPUT_REL_X INPUT_REL_HWHEEL>
                    , <INPUT_REL_Y INPUT_REL_WHEEL>;
        };

        tball0_mmv_il {
                compatible = "zmk,input-listener";
                device = <&tball0_split>;
                precise {
                        layers = <NUM>;
                        input-processors = <&xy_scaler 2 3>;
                };
                scroll {
                        layers = <MSC>;
                        input-processors = <&xy_transf (INPUT_TRANSFORM_Y_INVERT)>
                                        , <&xy_scaler 1 25>, <&x_scaler 0 1>
                                        , <&to_wheel>;
                };
        };

        tball1_mmv_il {
                compatible = "zmk,input-listener";
                device = <&tball1_split>;
                precise {
                        layers = <NUM>;
                        input-processors = <&xy_scaler 2 3>;
                };
                scroll {
                        layers = <MSC>;
                        input-processors = <&xy_transf (INPUT_TRANSFORM_Y_INVERT)>
                                        , <&xy_scaler 1 25>, <&x_scaler 0 1>
                                        , <&to_wheel>;
                };
        };

        tpoint0_mmv_il {
                compatible = "zmk,input-listener";
                device = <&tpoint0_split>;
                input-processors = <&xy_transf (INPUT_TRANSFORM_Y_INVERT)>;
                precise {
                        layers = <NUM>;
                        inherit;
                        input-processors = <&xy_scaler 2 3>;
                };
                scroll {
                        layers = <MSC>;
                        inherit;
                        input-processors = <&xy_scaler 1 22>, <&x_scaler 0 1>
                                         , <&to_wheel>;
                };
        };

        tpad0_mmv_il {
                compatible = "zmk,input-listener";
                device = <&tpad0_split>;
                input-processors = <&xy_transf (INPUT_TRANSFORM_Y_INVERT)>;
                precise {
                        layers = <NUM>;
                        inherit;
                        input-processors = <&xy_scaler 2 3>;
                };
                scroll {
                        layers = <MSC>;
                        inherit;
                        input-processors = <&xy_scaler 1 22>, <&x_scaler 0 1>
                                         , <&to_wheel>;
                };
        };

        mou0_mmv_il {
                compatible = "zmk,input-listener";
                device = <&mou0_split>;
                input-processors = <&xy_transf (INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>;
                precise {
                        layers = <NUM>;
                        inherit;
                        input-processors = <&xy_scaler 2 3>;
                };
                scroll {
                        layers = <MSC>;
                        inherit;
                        input-processors = <&xy_scaler 1 40>, <&x_scaler 0 1>
                                         , <&to_wheel>;
                };
        };

        behaviors {
                m_v: mouse_move {
                        compatible = "zmk,behavior-input-two-axis";
                        #binding-cells = <1>;
                        trigger-period-ms = <12>; // slow down for OTA, default is 3ms
                        x-input-code = <INPUT_REL_X>;
                        y-input-code = <INPUT_REL_Y>;
                        time-to-max-speed-ms = <300>;
                        acceleration-exponent = <1>;
                };
                m_s: mouse_scroll {
                        compatible = "zmk,behavior-input-two-axis";
                        #binding-cells = <1>;
                        trigger-period-ms = <12>; // slow down for OTA, default is 3ms
                        x-input-code = <INPUT_REL_HWHEEL>;
                        y-input-code = <INPUT_REL_WHEEL>;
                        time-to-max-speed-ms = <50>;
                        acceleration-exponent = <1>;
                };
                ec_s: mouse_scroll {
                        compatible = "zmk,behavior-input-two-axis";
                        #binding-cells = <1>;
                        trigger-period-ms = <12>; // slow down for OTA, default is 3ms
                        x-input-code = <INPUT_REL_HWHEEL>;
                        y-input-code = <INPUT_REL_WHEEL>;
                        time-to-max-speed-ms = <277>;
                        acceleration-exponent = <0>;
                };
                rot_enc: sensor_rotate {
                        compatible = "zmk,behavior-sensor-rotate";
                        #sensor-binding-cells = <0>;
                        bindings = <&ec_s MOVE_Y(-17)>, <&ec_s MOVE_Y(17)>;
                        tap-ms = <65>;
                };
        };

        mmv_input_listener {
                compatible = "zmk,input-listener";
                device = <&m_v>;
        };
        mms_input_listener {
                compatible = "zmk,input-listener";
                device = <&m_s>;
        };

        //   0   1   2   3   4     5   6   7   8   9  <-- split keyboard
        //  10  11  12  13  14    15  16  17  18  19
        //  20  21  22  23  24    25  26  27  28  29
        //          30  31  32    33  34  35
        //  36  37  38  <-- generic pointer devices
        //  39  40  41  <-- mouse devices
        //  42  43  44
        //  45  46  47
        combos {
                compatible = "zmk,combos";

                spc       { timeout-ms = <70>; key-positions = <16 17>; bindings = <&kp SPC>; layers = <DEF GME LHB NUM>; };
                bksp      { timeout-ms = <70>; key-positions = <17 18>; bindings = <&kp BKSP>; layers = <DEF GME LHB NUM>; };
                del       { timeout-ms = <70>; key-positions = <16 18>; bindings = <&kp DEL>; layers = <DEF GME LHB NUM>; };

                esc       { timeout-ms = <70>; key-positions = <11 12>; bindings = <&kp ESC>; layers = <DEF GME LHB NUM>; };
                tab       { timeout-ms = <70>; key-positions = <12 13>; bindings = <&kp TAB>; layers = <DEF GME LHB NUM>; };

                ret_r     { timeout-ms = <30>; key-positions = <17 26>; bindings = <&kp RET>; layers = <DEF GME LHB NUM>; };
                ret_l     { timeout-ms = <30>; key-positions = <12 23>; bindings = <&kp RET>; layers = <DEF GME LHB NUM>; };

                mkp_swap  { timeout-ms = <60>; key-positions = <36 38>; bindings = <&tog LHB>; layers = <DEF GME LHB NUM MSK MSC>; };
                mou_swap  { timeout-ms = <60>; key-positions = <40 41>; bindings = <&tog LHB>; layers = <DEF GME LHB NUM MSK MSC>; };

                dfu_l     { timeout-ms = <60>; key-positions = <0 1>; bindings = <&bootloader>; layers = <MSC>; };

                tog_num_l { timeout-ms = <60>; key-positions = <2 12>; bindings = <&tog NUM>; layers = <DEF GME LHB NUM MSK MSC>; };
                tog_num_r { timeout-ms = <60>; key-positions = <7 17>; bindings = <&tog NUM>; layers = <DEF GME LHB NUM MSK MSC>; };

                tog_msk_l { timeout-ms = <60>; key-positions = <21 22 23>; bindings = <&tog MSK>; layers = <DEF GME LHB NUM MSK MSC>; };
                tog_msk_r { timeout-ms = <60>; key-positions = <26 27 28>; bindings = <&tog MSK>; layers = <DEF GME LHB NUM MSK MSC>; };
        };

        behaviors {
                hm_l: homerow_mods_left {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&kp>, <&kp>;
                };
                hm_r: homerow_mods_right {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&kp>, <&kp>;
                };
                hl_l: homerow_layers_left {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&mo>, <&kp>;
                };
                hl_r: homerow_layers_right {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&mo>, <&kp>;
                };
                kp_tg: key_press_tap_toggle {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&kp>, <&tog>;
                };
                hmkp_tg: hold_mouse_key_press_tap_toggle {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&mkp>, <&tog>;
                };
        };

        kpad: key_kip_a_d {
                compatible = "zmk,behavior-key-press-lip";
                #binding-cells = <1>;
                keycodes = <A D>;
        };
        kpws: key_kip_w_s {
                compatible = "zmk,behavior-key-press-lip";
                #binding-cells = <1>;
                keycodes = <W S>;
        };

        tempo: key_tempo {
                compatible = "zmk,behavior-key-tempo";
                #binding-cells = <0>;
                usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>;
        };

        keymap {
                compatible = "zmk,keymap";
                DEF_layer {
// +------------------------------------------------------+     +--------------------------------------------------------+
// |     Q    |  LCTRL:W |  _MSK:E  |  LALT:R  |     T    |     |     Y     |  RALT:U  |  _MSK:I   |  RCTRL:O |     P    |
// |     A    |  _NUM:S  |  _NUM:D  |  _NUM:F  |     G    |     |     H     |  _NUM:J  |  _NUM:K   |  _NUM:L  |     ;:   |
// |  SHFT Z  |  LGUI:X  |  LGUI:C  |  LGUI:V  |     B    |     |     N     |  RGUI:M  |  RGUI:,<  |  RGUI:.> |  SHFT /? |
//                       | ^MSK:ESC |  GUI:ESC | CTRL:TAB |     |  ALT:ENT  | _NUM:SPC | ^MSK:BKSP |
                        display-name = "Default";
                        bindings = <
   &kp Q          &hm_l LCTRL W   &hl_l MSK E    &hm_l LALT R    &kp T               &kp Y           &hm_r RALT U     &hl_r MSK I       &hm_r RCTRL O   &kp P
   &kp A          &hl_l NUM S     &hl_l NUM D    &hl_l NUM F     &kp G               &kp H           &hl_r NUM J      &hl_r NUM K       &hl_r NUM L     &kp SEMI
   &mt LSHFT Z    &hm_l LGUI X    &hm_l LGUI C   &hm_l LGUI V    &kp B               &kp N           &hm_r RGUI M     &hm_r RGUI COMMA  &hm_r RGUI DOT  &mt RSHFT FSLH
                                  &lt MSK ESC    &mt LGUI ESC    &mt LCTRL TAB       &mt LALT RET    &lt NUM SPACE    &lt MSK BKSP
   &mkp RCLK   &hmkp_tg MCLK MSC   &mkp LCLK
   &mkp LCLK   &mo MSC             &hmkp_tg MCLK MSC
   &mkp MCLK   &mkp MB5            &mkp MB5
   &mkp RCLK   &mkp MB4            &mkp MB4
                        >;
                        sensor-bindings = <&rot_enc>;
                };
                GME_layer {
// +------------------------------------------------------+     +--------------------------------------------------------+
// |     Q    |     W    |     E    |     R    |     T    |     |     Y     |     U    |     I     |     O    |     P    |
// |     A    |     S    |     D    |     F    |     G    |     |     H     |     J    |     K     |     L    |     ;:   |
// |  SHFT Z  |     X    |     C    |     V    |     B    |     |     N     |     M    |    ,<     |    .>    |  SHFT /? |
//                       | ^MSK:ESC |  GUI:ESC | CTRL:TAB |     |  ALT:ENT  | _NUM:SPC | ^MSK:BKSP |
                        display-name = "Gaming";
                        bindings = <
   &kp Q          &kpws W         &kp E          &kp R           &kp T               &kp Y           &kp U            &kp I           &kp O           &kp P
   &kpad A        &kpws S         &kpad D        &kp F           &kp G               &kp H           &kp J            &kp K           &kp L           &kp SEMI
   &mt LSHFT Z    &kp X           &kp C          &kp V           &kp B               &kp N           &kp M            &kp COMMA       &kp DOT         &mt RSHFT FSLH
                                  &lt MSK ESC    &mt LGUI ESC    &mt LCTRL TAB       &mt LALT RET    &lt NUM SPACE    &lt MSK BKSP
   &trans   &trans   &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
                        >;
                        sensor-bindings = <&rot_enc>;
                };
                LHB_layer {
                        display-name = "MKP Swap";
                        bindings = <
   &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
   &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
   &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                   &trans  &trans  &trans    &trans  &trans  &trans
   &mkp LCLK   &hmkp_tg MCLK MSC   &mkp RCLK
   &mkp RCLK   &hmkp_tg MCLK MSC   &mo MSC
   &mkp MCLK   &trans              &trans
   &mkp LCLK   &trans              &trans
                        >;
                        sensor-bindings = <&rot_enc>;
                };
                NUM_layer {
// +------------------------------------------------------+     +-------------------------------------------------------+
// |    1!    | LCTRL:2@  |    3#    | LALT:4$  |    5%   |     |    6^    |  RALT:7& |    8&    |  RCTRL 9( |    0)    |
// |    `~    |           |    {[    |    ]}    |         |     |    LFT   |   DWN    |    UP    |    RGT    |    '"    |
// | SHFT TAB |           |          |          |         |     |          |    -_    |    =+    |           |  SHFT \| |
//                        |          |          |         |     |          |    (H)   |          |
                        display-name = "Num";
                        bindings = <
   &kp N1             &hm_l LCTRL N2   &kp N3     &hm_l LALT N4   &kp N5              &kp N6      &hm_r RALT N7   &kp N8      &hm_r RCTRL N9   &kp N0
   &kp GRAVE          &trans           &kp LBKT   &kp RBKT        &trans              &kp LEFT    &kp DOWN        &kp UP      &kp RIGHT        &kp SQT
   &mt LSHFT TAB      &trans           &trans     &trans          &trans              &trans      &kp MINUS       &kp EQUAL   &trans           &mt RSHFT BSLH
                                       &trans     &trans          &trans              &trans      &trans          &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
                        >;
                        sensor-bindings = <&rot_enc>;
                };
                MSK_layer {
// +-----------------------------------------------------+     +------------------------------------------------------+
// |    F1    |    F2    |  (H) F3  |    F4    |    F5   |     |    F6    |    F7    |  (H) F8  |    F9    |    F10   |
// |   ^MSC   |   BRID   |   BRIU   |   VOLD   |   VOLU  |     |   MLFT   |   MDWN   |    MUP   |   MRGT   |   ^MSC   |
// | SHF ^MSC |   RCLK   |   MCLK   |   LCLK   |   F12   |     |   F11    |   LCLK   |   MCLK   |   RCLK   | SHF ^MSC |
//                       |   (H)    |          |          |     |          |          |    (H)   |
                        display-name = "Mou Key";
                        bindings = <
   &kp F1            &kp F2        &kp F3        &kp F4        &kp F5            &kp F6      &kp F7      &kp F8      &kp F9      &kp F10
   &tog MSC          &kp C_BRI_DN  &kp C_BRI_UP  &kp C_VOL_DN  &kp C_VOL_UP      &m_v MOU_L  &m_v MOU_D  &m_v MOU_U  &m_v MOU_R  &tog MSC
   &kp_tg LSHFT MSC  &mkp RCLK     &mkp MCLK     &mkp LCLK     &kp F12           &kp F11     &mkp LCLK   &mkp MCLK   &mkp RCLK   &kp_tg RSHFT MSC
                                   &trans        &trans        &trans            &trans      &trans      &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
                        >;
                        sensor-bindings = <&rot_enc>;
                };
                MSC_layer {
// +------------------------------------------------------+     +------------------------------------------------------+
// |          |   BT_0   | (H) BT_1 | (H) BT_C |  RESET   |     |   RESET  |    (H)   |    (H)   |   ^GME   |    DFU   |
// |   ^MSC   |  ISA_ON  |  ISA_OFF |  ISA_SLP |  STD_UL  |     |   SLFT   |   SDWN   |    SUP   |   SRGT   |   ^MSC   |
// | SHF ^MSC |   RCLK   |   MCLK   |   LCLK   |  TEMPO   |     |          |   LCLK   |   MCLK   |   RCLK   | SHF ^MSC |
//                       |   (H)    |          |          |     |          |          |    (H)   |
                        display-name = "Mou Scroll";
                        bindings = <
   &trans            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_CLR    &sys_reset        &sys_reset   &trans        &trans      &tog GME      &bootloader
   &tog MSC          &isa ISA_ON   &isa ISA_OFF  &isa ISA_SLP  &studio_unlock    &m_s SCL_L   &m_s SCL_D    &m_s SCL_U  &m_s SCL_R    &tog MSC
   &kp_tg RSHFT MSC  &mkp RCLK     &mkp MCLK     &mkp LCLK     &tempo            &trans       &mkp LCLK     &mkp MCLK   &mkp RCLK     &kp_tg RSHFT MSC
                             &trans        &trans        &trans            &trans       &trans        &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
                        >;
                        sensor-bindings = <&rot_enc>;
                };
       };
};

// #define OUTPUT_SOURCE_LAYER_STATE_CHANGE        1
// #define OUTPUT_SOURCE_POSITION_STATE_CHANGE     2
// #define OUTPUT_SOURCE_KEYCODE_STATE_CHANGE      3
// #define OUTPUT_SOURCE_MOUSE_BUTTON_STATE_CHANGE 4
// #define OUTPUT_SOURCE_MOUSE_WHEEL_STATE_CHANGE  5
// #define OUTPUT_SOURCE_TRANSPORT                 6
// /{
//         // lra0_obl__press_key_code_q {
//         //         compatible = "zmk,output-behavior-listener";
//         //         layers = < DEF LHB MSC >;
//         //         sources = < OUTPUT_SOURCE_KEYCODE_STATE_CHANGE >;
//         //         position = < 0x14 >;
//         //         bindings = < &ob_lra0 >;
//         // };
//         // ob_lra0: ob_lra0 {
//         //         compatible = "zmk,output-behavior-generic";
//         //         #binding-cells = <0>;
//         //         device = <&fb_lra0>;
//         //         // delay = <0>;
//         //         /* DON'T need time-to-live-ms for DRV2605 driver */
//         //         // time-to-live-ms = <130>;
//         //         /* force will be convrt to waveformm effect from DRV2605 library */
//         //         force = <7>;
//         // };
//         // led1_obl__press_mouse_btn_1 {
//         //         compatible = "zmk,output-behavior-listener";
//         //         layers = < DEF LHB MSC >;
//         //         /* trigger on mouse button 1 status change */
//         //         sources = < OUTPUT_SOURCE_MOUSE_BUTTON_STATE_CHANGE >;
//         //         position = < 1 >;
//         //         bindings = < &ob_mbtn_led1 >;
//         //         /* caught all state change that include key press and release */
//         //         all-state;
//         // };
//         // ob_mbtn_led1: ob_mbtn_led1 {
//         //         compatible = "zmk,output-behavior-generic";
//         //         #binding-cells = <0>;
//         //         device = <&fb_led0>;
//         //         delay = <0>;
//         //         /* set duty cycle of pwm, max 256 */
//         //         force = <120>;
//         //         /* enable momentum to trigger on both on all state change */
//         //         momentum;
//         //         momentum-force = <0>;
//         // };
//         // led1_obl__press_mouse_whl_1 {
//         //         compatible = "zmk,output-behavior-listener";
//         //         layers = < DEF LHB MSC >;
//         //         /* trigger on mouse wheel status change */
//         //         sources = < OUTPUT_SOURCE_MOUSE_WHEEL_STATE_CHANGE >;
//         //         bindings = < &ob_mwhl1_led1 >;
//         // };
//         // ob_mwhl1_led1: ob_mwhl1_led1 {
//         //         compatible = "zmk,output-behavior-generic";
//         //         #binding-cells = <0>;
//         //         device = <&fb_led0>;
//         //         delay = <0>;
//         //         time-to-live-ms = <25>;
//         //         /* set duty cycle of pwm, max 256 */
//         //         force = <80>;
//         // };
//         // pwm0_obl__press_key_code_p {
//         //         compatible = "zmk,output-behavior-listener";
//         //         layers = < DEF LHB MSC >;
//         //         sources = < OUTPUT_SOURCE_KEYCODE_STATE_CHANGE >;
//         //         position = < 0x13>;
//         //         bindings = < &ob_led0 >;
//         //         /* caught all state change that include key press and release */
//         //         all-state;
//         // };
//         // ob_led0: ob_led0 {
//         //         compatible = "zmk,output-behavior-generic";
//         //         #binding-cells = <0>;
//         //         device = <&fb_led0>;
//         //         delay = <0>;
//         //         /* set duty cycle of pwm, max 256 */
//         //         force = <180>;
//         //         /* enable momentum to trigger on both on all state change */
//         //         momentum;
//         //         momentum-force = <12>;
//         // };
// };
