/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <zephyr/dt-bindings/input/input-event-codes.h>

#include <behaviors.dtsi>
// #include <behaviors/mouse_keys.dtsi>
#include <behaviors/mouse_key_press.dtsi>
#include <behaviors/mouse_key_toggle.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/input_transform.h>

#define DEFAULT 0
#define RAISE   1

#define OUTPUT_SOURCE_LAYER_STATE_CHANGE        1
#define OUTPUT_SOURCE_POSITION_STATE_CHANGE     2
#define OUTPUT_SOURCE_KEYCODE_STATE_CHANGE      3
#define OUTPUT_SOURCE_TRANSPORT                 4

#define HID_IO_USAGE_FWD_TO_MOUSE 1
#define HID_IO_USAGE_FWD_TO_JOYSTICK 2

/ {
        xy_transf: xy_transf {
                compatible = "zmk,input-processor-transform";
                #input-processor-cells = <1>;
                type = <INPUT_EV_REL>;
                x-codes = <INPUT_REL_X>, <INPUT_REL_WHEEL>;
                y-codes = <INPUT_REL_Y>, <INPUT_REL_HWHEEL>;
        };
        xy_scaler: xy_scaler {
                compatible = "zmk,input-processor-scaler";
                #input-processor-cells = <2>;
                type = <INPUT_EV_REL>;
                codes = <INPUT_REL_X>, <INPUT_REL_Y>;
                track-remainders;
        };
        x_scaler: x_scaler {
                compatible = "zmk,input-processor-scaler";
                #input-processor-cells = <2>;
                type = <INPUT_EV_REL>;
                codes = <INPUT_REL_X>;
        };
        y_scaler: y_scaler {
                compatible = "zmk,input-processor-scaler";
                #input-processor-cells = <2>;
                type = <INPUT_EV_REL>;
                codes = <INPUT_REL_Y>;
        };
        xy_swap: xy_swap {
                compatible = "zmk,input-processor-code-mapper";
                #input-processor-cells = <0>;
                type = <INPUT_EV_REL>;
                map = <INPUT_REL_X INPUT_REL_Y>
                    , <INPUT_REL_Y INPUT_REL_X>
                    , <INPUT_REL_WHEEL INPUT_REL_HWHEEL>
                    , <INPUT_REL_HWHEEL INPUT_REL_WHEEL>;
        };
        to_wheel: to_wheel {
                compatible = "zmk,input-processor-code-mapper";
                #input-processor-cells = <0>;
                type = <INPUT_EV_REL>;
                map = <INPUT_REL_X INPUT_REL_HWHEEL>
                    , <INPUT_REL_Y INPUT_REL_WHEEL>;
        };

        tball1_pri_mmv_il {
                compatible = "zmk,input-listener";
                device = <&pd0>;
                default {
                        layers = <DEFAULT>;
                        input-processors = <&y_scaler 0 1>;
                };
        };
        tball1_sec_mmv_il {
                compatible = "zmk,input-listener";
                device = <&pd0a>;
                default {
                        layers = <DEFAULT>;
                        input-processors = <&y_scaler 0 1>, <&xy_swap>;
                };
        };

        // tb0_mmv_ibl {
        //         compatible = "zmk,input-behavior-listener";
        //         device = <&pd0>;
        //         layers = <DEFAULT>;
	//         evt-type = <INPUT_EV_REL>;
	//         x-input-code = <INPUT_REL_X>;
	//         y-input-code = <INPUT_REL_Y>;
        //         // bindings = <&ib_tog_layer RAISE>;
        //         bindings = <&ib_fwd_to_hid_io>;
        //         x-invert;
        //         y-invert;
        // };
        // tb0_msl_ibl {
        //         compatible = "zmk,input-behavior-listener";
        //         device = <&pd0>;
        //         layers = <RAISE>;
        //         evt-type = <INPUT_EV_REL>;
        //         x-input-code = <INPUT_REL_MISC>;
        //         y-input-code = <INPUT_REL_WHEEL>;
        //         y-invert;
        //         // bindings = <&ib_fwd_to_hid_io>;
        // };
        // tball1_mmv_il {
        //         compatible = "zmk,input-listener";
        //         device = <&pd0>;
        //         input-processors = <&xy_transf (INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>;
        //         // precise {
        //         //         layers = <DEFAULT>;
        //         //         inherit;
        //         //         input-processors = <&xy_scaler 3 4>;
        //         // };
        //         scroll {
        //                 layers = <RAISE>;
        //                 inherit;
        //                 input-processors = <&xy_scaler 1 25>, <&x_scaler 0 1>, <&to_wheel>;
        //         };
        // };

        // tb0a_mmv_ibl {
        //         compatible = "zmk,input-behavior-listener";
        //         device = <&pd0a>;
        //         layers = <DEFAULT>;
	// 	   evt-type = <INPUT_EV_REL>;
	// 	   x-input-code = <INPUT_REL_X>;
	// 	   y-input-code = <INPUT_REL_Y>;
        //         // bindings = <&ib_tog_layer RAISE>;
        //         // bindings = <&ib_fwd_to_hid_io>;
        // };
        // t0a_msl_ibl {
        //         compatible = "zmk,input-behavior-listener";
        //         device = <&pd0a>;
        //         layers = <RAISE>;
        //         evt-type = <INPUT_EV_REL>;
        //         x-input-code = <INPUT_REL_HWHEEL>;
        //         y-input-code = <INPUT_REL_WHEEL>;
        //         y-invert;
        //         // bindings = <&ib_fwd_to_hid_io>;
        // };

        // tb1_mmv_ibl {
        //         compatible = "zmk,input-behavior-listener";
        //         device = <&pd1>;
        //         layers = <DEFAULT>;
	// 	   evt-type = <INPUT_EV_REL>;
	// 	   x-input-code = <INPUT_REL_X>;
	// 	   y-input-code = <INPUT_REL_Y>;
        //         // bindings = <&ib_tog_layer RAISE>;
        //         // bindings = <&ib_fwd_to_hid_io>;
        // };
        // tb1_msl_ibl {
        //         compatible = "zmk,input-behavior-listener";
        //         device = <&pd1>;
        //         layers = <RAISE>;
        //         evt-type = <INPUT_EV_REL>;
        //         x-input-code = <INPUT_REL_HWHEEL>;
        //         y-input-code = <INPUT_REL_WHEEL>;
        //         y-invert;
        //         // bindings = <&ib_fwd_to_hid_io>;
        // };

        // tpoint0_mmv_ibl {
        //         compatible = "zmk,input-behavior-listener";
        //         device = <&tpoint0>;
        //         layers = <DEFAULT>;
	//         evt-type = <INPUT_EV_REL>;
	// 	   x-input-code = <INPUT_REL_X>;
	// 	   y-input-code = <INPUT_REL_Y>;
        //         y-invert;
        //         // bindings = <&ib_tog_layer RAISE>;
        //         // bindings = <&ib_fwd_to_hid_io>;
        // };
        // tpoint0_msl_ibl {
        //         compatible = "zmk,input-behavior-listener";
        //         device = <&tpoint0>;
        //         layers = <RAISE>;
        //         evt-type = <INPUT_EV_REL>;
        //         x-input-code = <INPUT_REL_HWHEEL>;
        //         y-input-code = <INPUT_REL_WHEEL>;
        //         // bindings = <&ib_fwd_to_hid_io>;
        // };

        // tpad0_mmv_ibl {
        //         compatible = "zmk,input-behavior-listener";
        //         device = <&tpad0>;
        //         layers = <DEFAULT>;
	// 	   evt-type = <INPUT_EV_REL>;
	//         x-input-code = <INPUT_REL_X>;
	//         y-input-code = <INPUT_REL_Y>;
        //         // bindings = <&ib_tog_layer RAISE>;
        //         // bindings = <&ib_fwd_to_hid_io>;
        //         y-invert;
        // };
        // tpad0_msl_ibl {
        //         compatible = "zmk,input-behavior-listener";
        //         device = <&tpad0>;
        //         layers = <RAISE>;
        //         evt-type = <INPUT_EV_REL>;
        //         x-input-code = <INPUT_REL_HWHEEL>;
        //         y-input-code = <INPUT_REL_WHEEL>;
        //         // bindings = <&ib_fwd_to_hid_io>;
        // };

	// anin0_ibl {
	// 	compatible = "zmk,input-behavior-listener";
	// 	device = <&anin0>;
	// 	layers = <DEFAULT>;
        //         bindings = <&ib_fwd_to_hid_io>;
	// };

        // ib_tog_layer: ib_tog_layer {
        //         compatible = "zmk,input-behavior-tog-layer";
        //         #binding-cells = <1>;
        //         time-to-live-ms = <1000>;
        // };

        // ib_fwd_to_hid_io: ib_forward_fwd_to_hid_io {
        //         compatible = "zmk,input-behavior-fwd-to-hid-io";
        //         #binding-cells = <0>;
        //         usage = <HID_IO_USAGE_FWD_TO_MOUSE>;
        // };

        // erm0_obl__enter_raise_layer {
        //         compatible = "zmk,output-behavior-listener";
        //         layers = < RAISE >;
        //         sources = < OUTPUT_SOURCE_LAYER_STATE_CHANGE >;
        //         bindings = < &ob_erm0_in &ob_erm0_out >;
        // };
        // erm0_obl__back_to_default_layer {
        //         compatible = "zmk,output-behavior-listener";
        //         layers = < DEFAULT >;
        //         sources = < OUTPUT_SOURCE_LAYER_STATE_CHANGE >;
        //         invert-state;
        //         bindings = < &ob_erm0_out >;
        // };
        // erm0_obl__press_position_5 {
        //         compatible = "zmk,output-behavior-listener";
        //         layers = < DEFAULT >;
        //         sources = < OUTPUT_SOURCE_POSITION_STATE_CHANGE >;
        //         position = <5>;
        //         bindings = < &ob_erm0_in >;
        // };
        // erm0_obl__press_key_code_D {
        //         compatible = "zmk,output-behavior-listener";
        //         layers = < DEFAULT >;
        //         sources = < OUTPUT_SOURCE_KEYCODE_STATE_CHANGE >;
        //         position = < 0x07 >;
        //         bindings = < &ob_erm0_in >;
        // };
        // ob_erm0_in: ob_generic_erm0_in {
        //         compatible = "zmk,output-behavior-generic"; #binding-cells = <0>;
        //         device = <&lra0>; delay = <1>; time-to-live-ms = <30>; force = <80>;
        // };
        // ob_erm0_out: ob_generic_erm0_out {
        //         compatible = "zmk,output-behavior-generic"; #binding-cells = <0>;
        //         device = <&lra0>; delay = <133>; time-to-live-ms = <10>; force = <30>;
        // };

        keymap {
                compatible = "zmk,keymap";
                default_layer {
                        bindings = <
   &bt BT_CLR   &out OUT_TOG      &mkp LCLK   &mkp RCLK
   &mkp LCLK    &mo RAISE         &mkp MCLK   &mktg MB4
                        >;
                };
                raise_layer {
                        bindings = <
   &trans       &trans            &trans       &trans
   &trans       &trans            &trans       &trans
                        >;
                };
       };
};
